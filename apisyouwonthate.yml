# These rules dictate actual content of the API: headers, URL conventions, and general 
# Good Ideasâ„¢ for HTTP APIs, mainly from the books/blogs on apisyouwonthate.com

# TODO

# Make sure every post/put/delete/patch endpoint has some sort of security
# (OAuth 2, API Key, but not both)

# Numeric IDs are awful, use a UUID

# No global version in url or header 

# Correct error response format (JSO:API or RFC 7807)

# Mime type should have "; charset=utf-8"

# No path defined for /

# No "(e/E)rror" in 2xx

# If a DELETE method is successfully applied, the origin server SHOULD
#    send a 202 (Accepted) status code if the action will likely succeed
#    but has not yet been enacted, a 204 (No Content) status code if the
#    action has been enacted and no further information is to be supplied,
#    or a 200 (OK) status code if the action has been enacted and the
#    response message includes a representation describing the status.

# header-parameter-names-kebab-case': {
#    given: "$..parameters[?(@.in === 'header')]",

rules:
  paths-kebab-case:
    description: Should paths be kebab-case.
    message: '{{property}} is not kebab-case: {{error}}'
    severity: warn
    recommended: true
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        match: "^(\/[a-z0-9-{}]+)+$"

  no-x-headers:
    description: "Please do not use headers with X-"
    message: "Headers cannot start with X-, so please find a new name for {{property}}. More: https://tools.ietf.org/html/rfc6648"
    recommended: true
    type: style
    # TODO add encoding headers too "$..content.*.encoding.*.headers"
    given: "$..parameters.[?(@.in === 'header')].name"
    then:
      function: pattern
      functionOptions:
        notMatch: '^(x|X)-'

  # Author: Andrzej (https://github.com/jerzyn)
  oas2-hosts-https-only:
    description: "ALL requests MUST go through `https` protocol only"
    recommended: true
    severity: error
    formats: [oas2]
    type: "style"
    message: "Schemes MUST be https and no other value is allowed."
    given: $.schemes
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: string
            enum: ["https"]
          maxItems: 1

  # Author: Andrzej (https://github.com/jerzyn)
  headers-hyphenated-pascal-case:
    description: All `HTTP` headers MUST use `Hyphenated-Pascal-Case` notation
    severity: error
    given: "$..parameters[?(@.in == 'header')].name"
    message: "'HTTP' headers MUST follow 'Hyphenated-Pascal-Case' notation"
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        match: "/^([A-Z][a-z0-9]-)*([A-Z][a-z0-9])+/"

  # Author: Andrzej (https://github.com/jerzyn)
  oas3-hosts-https-only: # checks how does the servers array values start
    description: "ALL requests MUST go through `https` protocol only"
    formats:
      - oas3
    recommended: true
    severity: error
    message: "Servers MUST be https and no other protocol is allowed."
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"
  
  # Author: Andrzej (https://github.com/jerzyn)
  oas3-request-support-json
    description: Every request SHOULD support `application/json` media type
    formats:
      - oas3
    recommended: true
    severity: error
    message: "{{description}}: {{error}}"
    given: $.paths.[*].requestBody.content[?(@property.indexOf('json') === -1)]^
    then:
      function: pattern
      functionOptions:
        match: falsy
